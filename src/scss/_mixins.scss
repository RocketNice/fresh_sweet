//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  exs: 321px,
  mxs: 375px,
  lxs: 425px,
  xs: 576px,
  sm: 768px,
  md: 992px,
  mdw: 1024px,
  lg: 1200px,
  mmlg: 1280px,
  mlg: 1440px,
  elg: 1600px,
  exlg: 1920px
);

$orientations: (
  l: landscape,
  p: portrait
);

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media screen and (min-width: $breakpoint-value) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint, $orientation: p) {
  // Screen orientation
  $orientation-value: map-get($orientations, 'p');
  @if map-has-key($orientations, $orientation)  {
    $orientation-value: map-get($orientations, $orientation);
  } @else {
    @warn 'Invalid orientation rule.';
  }

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @if ($orientation == p) {
      @media screen and (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else {
      @media screen and (max-width: ($breakpoint-value - 1)) and (orientation: ($orientation-value)) {
        @content
      }
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    // Write the media query.
    @media screen and (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}


@mixin no-visible-scrollbar() {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin colored-button() {
  text-decoration: none;
  background: linear-gradient(92.29deg, #D66406 1.06%, #C11F1F 123.63%);
  border-radius: 100px;
  color: white;
  border: 0;
  font-size: 18px;
  line-height: 21px;
  font-weight: 500;
  opacity: 1;
  outline: none;
  width: max-content;
  cursor: pointer;
  @include transition(all);

  &:hover {
    @include respond-above(lg) {
      @include transition(all);
      box-shadow: 0 0 30px rgba(197, 43, 28, 0.2), 0 8px 30px rgba(197, 44, 27, 0.3);
    }
  }
}

@mixin transition($props...) {
  $result: #{''};

  @for $i from 0 to length($props) {
    @if($i == 0) {
      $result: #{#{nth($props, $i + 1)} $ANIMATE_TIME};
    } @else {
      $result: #{$result #{nth($props, $i + 1)} $ANIMATE_TIME};
    }

    @if (length($props) == 1) {
      $result: $result;
    } @else if ($i != (length($props) - 1)) {
      $result: #{$result  ', '};
    }
  }

  transition: $result;
  @content;
}


@mixin colored-scrollbar() {
  // Стили скроллбара для браузеров без web-kit, в первую очередь, Firefox.
  scrollbar-color: $new_light_orange $gray_;
  scrollbar-width: thin;
  // Стили скроллбара для Webkit (Chrome, Safari)
  &::-webkit-scrollbar-thumb {
    border-radius: 3px;
    background-color: $new_light_orange;
  }
  &::-webkit-scrollbar {
    width: 5px;
    height: 5px;
  }
  &::-webkit-scrollbar-track {
    border-radius: 0;
    background-color: $gray_;
  }

  @content;
}
